package android.example.com

import android.content.Context
import android.example.com.R
import androidx.appcompat.app.AppCompatActivity
import android.os.Bundle
import android.view.View
import android.view.inputmethod.InputMethodManager
import android.widget.Button
import android.widget.EditText
import android.widget.TextView
import androidx.databinding.DataBindingUtil
import android.example.com.databinding.ActivityMainBinding


class MainActivity : AppCompatActivity() {

    // the name is automatically generated by collapsing name of activity_main.xml
    // and applying camelcase
    private lateinit var binding: ActivityMainBinding

    // instantiate myName instance of MyName class so data binding can use it in layout
    private val myName: MyName = MyName("Stephen Devine")

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
//        setContentView(R.layout.activity_main)
        binding = DataBindingUtil.setContentView(this, R.layout.activity_main)

        // assign the myName class created above to the myName data View in the binded layout
        binding.myName = myName

        // set onClick listener for done_button
//        findViewById<Button>(R.id.done_button).setOnClickListener {
//            addNickname(it)
//        }

        // set onClick listener for done_button using layout binding instead of findViewById
        // note that 'doneButton' is name generated automatically by layout, i think collapsing the
        // id 'done_button' that i gave it by removing the underscore and applying camelcase
        binding.doneButton.setOnClickListener {
            addNickname(it)
        }
    }

    // create add_nickname function, which will be called on done_button View
    fun addNickname(view: View) {

//        // get editText and nicknameTextViews
//        val editText = findViewById<EditText>(R.id.nickname_edit)
//        val nicknameTextView = findViewById<TextView>(R.id.nickname_text)
//
//        // update the nicknameTextView, and make it visible
//        nicknameTextView.text = editText.text
//        nicknameTextView.visibility = View.VISIBLE
//
//        // make the editText and done_button Views disappear
//        editText.visibility = View.GONE
//        view.visibility = View.GONE
//
//        // Hide the keyboard.
//        val imm = getSystemService(Context.INPUT_METHOD_SERVICE) as InputMethodManager
//        imm.hideSoftInputFromWindow(view.windowToken, 0)


        /////////////////////////////////////////////////


        // use binding instead
        // can update the bindings explicitly as done here, or use apply() for conciseness
        // no difference in effect that i can tell,
        // except that invalidateAll outside apply() gives error
//        binding.nicknameText.text = binding.nicknameEdit.text
//        binding.nicknameEdit.visibility = View.GONE
//        binding.doneButton.visibility = View.GONE
//        binding.nicknameText.visibility = View.INVISIBLE

        // using apply() is a more concise where to update bindings
        binding.apply {

            // this is replaced in favor of the data binding approach using myName class below
            //nicknameText.text = binding.nicknameEdit.text

            // this assigns nicknameEdit.text to the myName data View in layout
            // then the nickname_text view in layout is setup to display
            // the myName data View nickname attribute as its text
            myName?.nickname = nicknameEdit.text.toString()

            // call invalidateAll "to invalidate all binding expressions so they
            // get created with teh correct data"
            // not exactly sure how this works or why necessary when using binding
            invalidateAll()
            nicknameEdit.visibility = View.GONE
            doneButton.visibility = View.GONE
            nicknameText.visibility = View.VISIBLE
        }

        // Hide the keyboard.
        val imm = getSystemService(Context.INPUT_METHOD_SERVICE) as InputMethodManager
        imm.hideSoftInputFromWindow(view.windowToken, 0)
    }
}
